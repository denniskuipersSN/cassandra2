# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:

  ### Variables ###
  repoUserName: '$(REPO_USERNAME)'
  repoPAT: '$(REPO_PAT)'
  repoPrefix: '$(REPO_PREFIX)'
  serviceName: $(SERVICE_NAME)
  serviceNamespace: $(SERVICE_NAMESPACE)  

pool:
  vmImage: ubuntu-latest

stages:

  ##############################################################################
  ###                                 RUN TESTS                              ###
  ##############################################################################
  - stage: Run_Tests
    jobs:
      - job: Run_Tests
        steps:
        - bash: |
            set -x # Echo Commands
            # Install Tools
            pip install -U pytest pytest-html pytest-xdist pytest-nunit
            # Change Dir
            cd tests/$(serviceName)
            # Run Tests
            pytest --verbose --nunitxml=TEST-results.xml
          displayName: 'Running Tests'  
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'NUnit'
            testResultsFiles: '**/TEST-*.xml'
            searchFolder: '$(System.DefaultWorkingDirectory)/tests/$(serviceName)'
            testRunTitle: '$(serviceName)-1.0.$(build.buildId)-tests'
          displayName: 'Publishing Results'

  ##############################################################################
  ###               BUILD DOCKER IMAGE AND PUSH TO DOCKER HUB                ###
  ##############################################################################
  - stage: Build_Image
    jobs:
      - job: Build_Image
        steps:
        - bash: |
            set -x # Echo Commands
            # Docker Login
            echo $(repoPAT) | docker login --username $(repoUserName) --password-stdin        
            # Build Image
            export REPO_PREFIX=$(repoPrefix)
            export TAG=latest
            export IMAGE=$(repoPrefix)/$(serviceName):$TAG
            # Change Dir
            if [ $(serviceName) == "cartservice" ] 
            then
              cd src/$(serviceName)/src
            else
              cd src/$(serviceName)
            fi
            # Build Image   
            docker build -t $IMAGE . && docker push $IMAGE   
          displayName: 'Building Image'

  ##############################################################################
  ###                       SERVICENOW DEVOPS CHANGE                         ###
  ##############################################################################
   - stage: DevOps_Change
     jobs:
       - job: DevOps_Change
         pool: server
         steps:
         - task: ServiceNow-DevOps-Server-Artifact-Registration@1
           inputs:
             connectedServiceName: 'srecon21-cassandra-ServiceNow DevOps Service Connection'
             artifactToolIdExists: false
             artifactRegistrationPayload: |
               {
                 "artifacts": [
                   {
                     "name":  "$(serviceName)",
                     "version": "1.0.$(build.buildId)",
                     "semanticVersion": "1.0.$(build.buildId)",
                     "repositoryName": "cassandra"
                   }
                 ],
                 "pipelineName": "$(system.teamProject)/$(build.definitionName)",
                 "taskExecutionNumber": "$(build.buildId)",
                 "stageName": "$(system.jobDisplayName)",
                 "attemptNumber": "$(system.jobAttempt)",
                 "branchName": "$(build.sourceBranchName)"                
               }
         - task: ServiceNow-DevOps-Server-Change-Acceleration@1
           inputs:
             connectedServiceName: 'srecon21-cassandra-ServiceNow DevOps Service Connection'
             changeRequestDetails: |
               {
                 "setCloseCode" : true,
                 "attributes": {
                   "cmdb_ci": {
                     "name": "$(serviceName)"
                   }
                 }
               }
  
  ##############################################################################
  ###                      DEPLOY IMAGE TO KUBERNETES                        ###
  ##############################################################################
  - stage: Deploy_Image
    jobs:
      - job: Deploy_Image
        steps:
        - bash: |
            set -x # Echo Commands
            # Prem Yaml
            export REPO_PREFIX=$(repoPrefix)
            # Change Dir
            cd src/$(serviceName) 
            # Substitute
            envsubst < ../../kubernetes-manifests/$(serviceName).yaml > ../../kubernetes-manifests/$(serviceName).subst
          displayName: 'Prepping Yaml'        
        - task: Kubernetes@1
          displayName: 'Deploying $(serviceName) Image..'
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: 'olympus'
            namespace: $(serviceNamespace)
            command: 'apply'
            arguments: '-f kubernetes-manifests/$(serviceName).subst'
